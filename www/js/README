<h2>Sample Munhumutapa APIs for Node JS</h2>

The Node JS module performs local signing and encryption using the same code used by the official Munhumutapa wallet.<br>
- Your passphrase, seed or private key are never submitted to the remote node when submitting a transaction.<br>
- Transaction bytes returned by the remote node are parsed and validated against the submitted data.<br>
- Transaction signing, encryption, and decryption are invoked locally using Javascript code.<br>

<h3>Setup using NPM</h3>
`npm i Munhumutapa`<br>
`echo n | copy /-y node_modules\Munhumutapa\sample\*.* *.*` - copy the Munhumutapa samples without overwriting existing files<br>

<h3>Setup using Munhumutapa installation</h3>
Install the Munhumutapa software (no need to download the blockchain)<br>
Install Node JS and NPM from https://nodejs.org<br>
Open a command prompt<br>
Navigate to the Munhumutapa installation folder<br>
`cd html/www/js` - make sure the folder has write permissions<br>
`npm install`<br>
`cd sample`<br>

<h3>Run Examples</h3>
Configure the remote node, Munhumutapa account and default chain by editing the `config.json` file<br>
Invoke any of the available samples using node, for example `node send.money.js`<br>

<h3>Packaging and Distribution</h3>
If installed from Munhumutapa installation, the Munhumutapa package no longer depends on a local Munhumutapa node.<br>
You can use the content of the `html/www/js` folder as a standalone module.<br> 

<h3>Warning</h3>
Your passphrase or private key are submitted to a remote node only when invoking specific APIs which require them to operate like the startForging API.<br>
We recommend that you avoid using these APIs in your scripts when connecting to an untrusted remote node.<br>